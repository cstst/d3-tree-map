{"version":3,"sources":["moneyCommas.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","x","toString","replace","App","state","data","drawMap","root","d3","sum","d","value","size","height","tile","treemap","color","tooltip","append","attrs","id","width","nodes","selectAll","descendants","enter","transform","concat","x0","y0","class","x1","y1","fill","category","data-name","name","data-category","data-value","on","_d$data","text","moneyCommas","data-vale","styles","visibility","style","pageY","pageX","split","y","i","categories","leaves","map","filter","index","self","indexOf","legendElm","fetch","then","res","json","movies","this","react_default","a","createElement","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.696129f5.chunk.js","sourcesContent":["module.exports = x => x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n","import React, { Component } from \"react\";\nimport * as d3 from \"d3\";\nimport moneyCommas from \"./moneyCommas\";\nimport \"d3-selection-multi\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    data: null\n  };\n  async componentDidMount() {\n    const movies = await fetch(\n      \"https://cdn.rawgit.com/freeCodeCamp/testable-projects-fcc/a80ce8f9/src/data/tree_map/movie-data.json\"\n    ).then(res => res.json());\n    this.drawMap(movies);\n  }\n\n  drawMap = data => {\n    const height = 675;\n    const width = 1200;\n\n    const root = d3.hierarchy(data);\n    root.sum(d => d.value);\n\n    const treemap = d3\n      .treemap()\n      .size([width, height - 100])\n      .tile(d3.treemapResquarify);\n\n    treemap(root);\n\n    const color = d3.scaleOrdinal(d3.schemeDark2);\n\n    const tooltip = d3\n      .select(\"#treemap\")\n      .append(\"div\")\n      .attrs({\n        id: \"tooltip\"\n      });\n\n    d3.select(\"#treemap\")\n      .append(\"svg\")\n      .attrs({\n        height,\n        width\n      })\n      .append(\"g\");\n\n    const nodes = d3\n      .select(\"svg g\")\n      .selectAll(\"g\")\n      .data(root.descendants())\n      .enter()\n      .append(\"g\")\n      .attrs({\n        transform: d => `translate(${[d.x0, d.y0]})`\n      });\n\n    nodes\n      .append(\"rect\")\n      .attrs({\n        class: \"tile\",\n        width: d => d.x1 - d.x0,\n        height: d => d.y1 - d.y0,\n        fill: d => color(d.data.category),\n        \"data-name\": d => d.data.name,\n        \"data-category\": d => d.data.category,\n        \"data-value\": d => d.data.value\n      })\n      .on(\"mouseover\", d => {\n        const { name, category, value } = d.data;\n        tooltip\n          .text(`${name}\\n${category}\\n$${moneyCommas(value)}`)\n          .attrs({\n            \"data-vale\": value\n          })\n          .styles({\n            visibility: \"visible\"\n          });\n      })\n      .on(\"mousemove\", () => {\n        tooltip\n          .style(\"top\", d3.event.pageY - 100 + \"px\")\n          .style(\"left\", d3.event.pageX - 40 + \"px\");\n      })\n      .on(\"mouseout\", function() {\n        tooltip.style(\"visibility\", \"hidden\");\n      });\n\n    nodes\n      .append(\"text\")\n      .attrs({\n        class: \"label\"\n      })\n      .selectAll(\"tspan\")\n      .data(d => d.data.name.split(/(?=[A-Z][^A-Z.])/g))\n      .enter()\n      .append(\"tspan\")\n      .attrs({\n        x: 3,\n        y: (d, i) => 10 + i * 10\n      })\n      .text(d => d);\n\n    let categories = root.leaves().map(nodes => nodes.data.category);\n    categories = categories.filter(\n      (category, index, self) => self.indexOf(category) === index\n    );\n\n    const legend = d3\n      .select(\"svg g\")\n      .append(\"g\")\n      .attrs({\n        id: \"legend\",\n        transform: `translate(${0}, ${height - 50})`\n      });\n    const legendElm = legend\n      .selectAll(\"g\")\n      .data(categories)\n      .enter()\n      .append(\"g\")\n      .attrs({\n        transform: (d, i) => `translate(${i * 150}, 0)`\n      });\n    legendElm.append(\"rect\").attrs({\n      class: \"legend-item\",\n      height: 30,\n      width: 30,\n      fill: d => color(d)\n    });\n    legendElm\n      .append(\"text\")\n      .attrs({\n        x: 35,\n        y: 20\n      })\n      .text(d => d);\n  };\n\n  render() {\n    return (\n      <div id=\"container\">\n        <h1 id=\"title\">Movie Sales</h1>\n        <div id=\"description\">\n          Top 100 Highest Grossing Movies Grouped By Genre\n        </div>\n        <div id=\"treemap\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}